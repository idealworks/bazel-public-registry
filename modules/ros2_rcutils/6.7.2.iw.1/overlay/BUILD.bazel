""" Builds rcutils.
"""

load("@bazel_skylib//lib:selects.bzl", "selects")
load("@ros2_rcutils_pip_deps//:requirements.bzl", "requirement")
load("@rules_python//python:defs.bzl", "py_binary", "py_library")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("//bzl:logging_macros.bzl", "logging_macros")

compile_pip_requirements(
    name = "python_requirements",
    extra_args = ["--allow-unsafe"],
    requirements_in = "//:requirements.txt",
    requirements_txt = "//:requirements_lock.txt",
    tags = ["manual"],
)

exports_files([
    "requirements.txt",
    "requirements_lock.txt",
])

_GENERATE_LOGGING_MACROS_PY = "//bzl:generate_rcutils_logging_macros.py"

py_library(
    name = "logging_generator",
    srcs = ["rcutils/logging.py"],
    visibility = ["//visibility:public"],
    deps = [requirement("empy")],
)

py_binary(
    name = "generate_logging_macros",
    srcs = [_GENERATE_LOGGING_MACROS_PY],
    main = _GENERATE_LOGGING_MACROS_PY,
    deps = [
        ":logging_generator",
        requirement("empy"),
    ],
)

logging_macros(
    name = "logging_macros",
    generator = ":generate_logging_macros",
    output = "include/rcutils/logging_macros.h",
    template = "resource/logging_macros.h.em",
)

cc_library(
    name = "rcutils",
    srcs = glob(
        [
            "src/*.c",
            "src/*.h",
        ],
        exclude = ["src/time_*.c"],
    ) + selects.with_or(
        {
            (
                "@platforms//os:android",
                "@platforms//os:linux",
                "@platforms//os:macos",
                "@platforms//os:qnx",
            ): ["src/time_unix.c"],
        },
        no_match_error = "Supported OSs: Android, Linux, macOS, QNX",
    ),
    hdrs = glob(["include/**/*.h"]) + [":logging_macros"],
    copts = ["-fPIC"],
    includes = ["include"],
    linkopts = selects.with_or(
        {
            ("@platforms//os:linux", "@platforms//os:macos"): ["-ldl"],
            ("@platforms//os:android", "@platforms//os:qnx"): [],
        },
        no_match_error = "Supported OSs: Android, Linux, macOS, QNX",
    ),
    local_defines = select({
        "@platforms//os:linux": ["_GNU_SOURCE"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
)
