config_setting(
    name = "x86_64_build",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
)

config_setting(
    name = "aarch64_build",
    constraint_values = [
        "@platforms//cpu:aarch64",
        "@platforms//os:linux",
    ],
)

cc_library(
    name = "libbackend_ethernet",
    srcs = glob(
        [
            "third-party/easyloggingpp/src/easylogging++.cc",
        ],
    ) + select({
        ":aarch64_build": [
            "third-party/lips/lib/v1.0.5.1/linux/arm64/libbackend-ethernet.a",
        ],
        "x86_64_build": [
            "third-party/lips/lib/v1.0.5.1/linux/amd64/libbackend-ethernet.a",
        ],
    }),
    hdrs = glob([
        "include/librealsense2/**/*.h*",
        "third-party/easyloggingpp/src/easylogging++.h",
    ]),
    copts = [
        # When preprocessing, do not shorten system header paths with canonicalization.
        "-fno-canonical-system-headers",
        # Disable all warnings.
        # librealsense2 produces a large number of warnings. Not all can blocked with -Wno- flags.
        # So we need to use the heavy handed approach of disabling all warnings.
        "-w",
        "-Wno-error",
    ],
    defines = [
        "BUILD_EASYLOGGINGPP",
        "ELPP_NO_DEFAULT_LOG_FILE",
        "ELPP_THREAD_SAFE",
        "RS2_USE_V4L2_BACKEND",
        "DISABLE_UVC_METADATA",
        "ENABLE_AE400_IMU",
        "HWM_OVER_XU",
        "RASPBERRY_PI",
    ],
    includes = [
        "include",
        "src",
        "third-party/easyloggingpp/src",
    ],
    linkopts = [
        "-fPIC",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@libusb",
    ],
)

cc_library(
    name = "ae400_realsense_sdk",
    srcs = glob(
        [
            "src/*.cpp",
            "src/**/*.cpp",
            "common/utilities/time/**/*.cpp",
        ],
        exclude = [
            "src/android/*",
            "src/android/jni/*",
            "src/android/fw-logger/*",
            "src/usbhost/*",
            "src/cuda/*",
            "src/fw/*",
            "src/gl/*",
            "src/libuvc/*",
            "src/mf/*",
            "src/tm2/*",
            "src/win/*",
            "src/win7/*",
            "src/winusb/*",
            "src/ethernet/*",
            "src/compression/*",
            "src/ipDeviceCommon/*",
        ],
    ) + [
        "common/decompress-huffman.h",
        "common/fw/firmware-version.h",
        "common/parser.hpp",
        "third-party/stb_image.h",
    ],
    hdrs = glob([
        "include/librealsense2/**/*.h*",
        "src/**/*.h",
        "src/**/*.hpp",
        "common/utilities/time/**/*.h",
    ]),
    copts = [
        # When preprocessing, do not shorten system header paths with canonicalization.
        "-fno-canonical-system-headers",
        # Disable all warnings.
        # librealsense2 produces a large number of warnings. Not all can blocked with -Wno- flags.
        # So we need to use the heavy handed approach of disabling all warnings.
        "-w",
        "-Wno-error",
        "-std=c++17",
    ],
    defines = [
        "RS2_USE_V4L2_BACKEND",
        "HWM_OVER_XU",
        "RASPBERRY_PI",
    ],
    includes = [
        "include",
        "src",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":json",
        ":libbackend_ethernet",
        ":rapidxml",
        ":realsense-file",
        ":sqlite",
        "@libusb",
    ],
    alwayslink = True,
)

cc_library(
    name = "easylogging",
    srcs = ["third-party/easyloggingpp/src/easylogging++.cc"],
    hdrs = ["third-party/easyloggingpp/src/easylogging++.h"],
    includes = ["third-party/easyloggingpp/src"],
)

cc_library(
    name = "roslz4",
    srcs = glob([
        "third-party/realsense-file/rosbag/**/*.c",
    ]),
    hdrs = glob(
        [
            "third-party/realsense-file/rosbag/roslz4/**/*.h",
        ],
    ),
    includes = ["third-party/realsense-file/rosbag/roslz4/include"],
    deps = ["@lz4"],
)

cc_library(
    name = "realsense-file",
    srcs = glob([
        "third-party/realsense-file/rosbag/**/*.cpp",
    ]),
    hdrs = glob(
        [
            "third-party/realsense-file/**/*.h",
            "third-party/realsense-file/**/*.hpp",
        ],
        exclude = ["third-party/realsense-file/lz4/**"],
    ),
    copts = [
        # When preprocessing, do not shorten system header paths with canonicalization.
        "-fno-canonical-system-headers",
        "-Wno-unused-variable",
        "-Wno-misleading-indentation",
        "-Wno-deprecated",
        "-std=c++17",
    ],
    includes = [
        "third-party/realsense-file/boost",
        "third-party/realsense-file/lz4",
        "third-party/realsense-file/rosbag/console_bridge/include",
        "third-party/realsense-file/rosbag/cpp_common/include",
        "third-party/realsense-file/rosbag/msgs",
        "third-party/realsense-file/rosbag/rosbag_storage/include",
        "third-party/realsense-file/rosbag/roscpp_serialization/include",
        "third-party/realsense-file/rosbag/roscpp_traits/include",
        "third-party/realsense-file/rosbag/roslz4/include",
        "third-party/realsense-file/rosbag/rostime/include",
    ],
    deps = [
        ":roslz4",
        "@lz4",
    ],
)

cc_library(
    name = "sqlite",
    srcs = ["third-party/sqlite/sqlite3.c"],
    hdrs = ["third-party/sqlite/sqlite3.h"],
)

cc_library(
    name = "json",
    hdrs = glob([
        "third-party/json.hpp",
    ]),
)

cc_library(
    name = "rapidxml",
    hdrs = [
        "third-party/rapidxml/rapidxml.hpp",
        "third-party/rapidxml/rapidxml_utils.hpp",
    ],
)
