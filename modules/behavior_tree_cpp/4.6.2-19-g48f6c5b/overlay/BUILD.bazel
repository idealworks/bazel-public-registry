cc_library(
    name = "minicoro",
    hdrs = ["3rdparty/minicoro/minicoro.h"],
    includes = ["3rdparty"],
)

cc_library(
    name = "tinyxml2",
    srcs = ["3rdparty/tinyxml2/tinyxml2.cpp"],
    hdrs = ["3rdparty/tinyxml2/tinyxml2.h"],
    includes = ["3rdparty/tinyxml2"],
)

cc_library(
    name = "wildcards",
    hdrs = ["3rdparty/wildcards/wildcards.hpp"],
    includes = ["3rdparty"],
)

cc_library(
    name = "flatbuffers",
    hdrs = ["3rdparty/flatbuffers/base.h"],
    includes = ["3rdparty"],
)

cc_library(
    name = "minitrace",
    srcs = ["3rdparty/minitrace/minitrace.cpp"],
    hdrs = ["3rdparty/minitrace/minitrace.h"],
    includes = ["3rdparty"],
)

cc_library(
    name = "behavior_tree_cpp",
    srcs = [
        "3rdparty/tinyxml2/tinyxml2.cpp",
        "src/action_node.cpp",
        "src/actions/sleep_node.cpp",
        "src/actions/test_node.cpp",
        "src/actions/updated_action.cpp",
        "src/basic_types.cpp",
        "src/behavior_tree.cpp",
        "src/blackboard.cpp",
        "src/bt_factory.cpp",
        "src/condition_node.cpp",
        "src/control_node.cpp",
        "src/controls/fallback_node.cpp",
        "src/controls/if_then_else_node.cpp",
        "src/controls/parallel_all_node.cpp",
        "src/controls/parallel_node.cpp",
        "src/controls/reactive_fallback.cpp",
        "src/controls/reactive_sequence.cpp",
        "src/controls/sequence_node.cpp",
        "src/controls/sequence_with_memory_node.cpp",
        "src/controls/switch_node.cpp",
        "src/controls/while_do_else_node.cpp",
        "src/decorator_node.cpp",
        "src/decorators/delay_node.cpp",
        "src/decorators/inverter_node.cpp",
        "src/decorators/repeat_node.cpp",
        "src/decorators/retry_node.cpp",
        "src/decorators/subtree_node.cpp",
        "src/decorators/timeout_node.cpp",
        "src/decorators/updated_decorator.cpp",
        "src/json_export.cpp",
        "src/loggers/bt_cout_logger.cpp",
        "src/loggers/bt_file_logger_v2.cpp",
        "src/loggers/bt_minitrace_logger.cpp",
        "src/loggers/bt_observer.cpp",
        "src/script_parser.cpp",
        "src/shared_library.cpp",
        "src/shared_library_UNIX.cpp",
        "src/tree_node.cpp",
        "src/xml_parsing.cpp",
    ],
    hdrs = glob([
        "include/**/*.hpp",
        "include/**/*.h",
    ]),
    defines = [
        "BTCPP_LIBRARY_VERSION=\\\"4.6.2\\\"",
    ],
    includes = ["include"],
    visibility = ["//visibility:public"],
    deps = [
        ":flatbuffers",
        ":minicoro",
        ":minitrace",
        ":tinyxml2",
        ":wildcards",
        "//3rdparty/lexy",
    ],
)
