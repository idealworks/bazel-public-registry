diff --git a/rosidl_adapter/rosidl_adapter/msg/__init__.py b/rosidl_adapter/rosidl_adapter/msg/__init__.py
index b02b7b5..d3e11cb 100644
--- a/rosidl_adapter/rosidl_adapter/msg/__init__.py
+++ b/rosidl_adapter/rosidl_adapter/msg/__init__.py
@@ -17,7 +17,7 @@ from rosidl_adapter.resource import expand_template
 
 
 def convert_msg_to_idl(package_dir, package_name, input_file, output_dir):
-    assert package_dir.is_absolute()
+    assert str(package_dir) == "." or package_dir.is_absolute()
     assert not input_file.is_absolute()
     assert input_file.suffix == '.msg'
 
diff --git a/rosidl_adapter/rosidl_adapter/srv/__init__.py b/rosidl_adapter/rosidl_adapter/srv/__init__.py
index c57b701..dd3895e 100644
--- a/rosidl_adapter/rosidl_adapter/srv/__init__.py
+++ b/rosidl_adapter/rosidl_adapter/srv/__init__.py
@@ -17,7 +17,7 @@ from rosidl_adapter.resource import expand_template
 
 
 def convert_srv_to_idl(package_dir, package_name, input_file, output_dir):
-    assert package_dir.is_absolute()
+    assert str(package_dir) == "." or package_dir.is_absolute()
     assert not input_file.is_absolute()
     assert input_file.suffix == '.srv'
 
diff --git a/rosidl_generator_c/bin/rosidl_generator_c b/rosidl_generator_c/bin/rosidl_generator_c
index e1d4567..c5b2477 100755
--- a/rosidl_generator_c/bin/rosidl_generator_c
+++ b/rosidl_generator_c/bin/rosidl_generator_c
@@ -34,6 +34,8 @@ def main(argv=sys.argv[1:]):
         help='If set, disable the generation of static type description '
              'code to reduce binary size.')
     args = parser.parse_args(argv)
+    print(f"args.generator_arguments_file: {args.generator_arguments_file}")
+    print(f"args.disable_description_codegen: {args.disable_description_codegen}")
 
     generate_c(args.generator_arguments_file, args.disable_description_codegen)
 
diff --git a/rosidl_generator_c/rosidl_generator_c/__init__.py b/rosidl_generator_c/rosidl_generator_c/__init__.py
index 50bb60b..58b756c 100644
--- a/rosidl_generator_c/rosidl_generator_c/__init__.py
+++ b/rosidl_generator_c/rosidl_generator_c/__init__.py
@@ -38,6 +38,7 @@ def generate_c(generator_arguments_file, disable_description_codegen=False):
         'idl__type_support.c.em': 'detail/%s__type_support.c',
         'idl__type_support.h.em': 'detail/%s__type_support.h',
     }
+    print(f"generator_arguments_file: {generator_arguments_file}")
     return generate_files(
         generator_arguments_file, mapping,
         post_process_callback=prefix_with_bom_if_necessary,
diff --git a/rosidl_generator_type_description/rosidl_generator_type_description/__init__.py b/rosidl_generator_type_description/rosidl_generator_type_description/__init__.py
index c62df17..340dae3 100644
--- a/rosidl_generator_type_description/rosidl_generator_type_description/__init__.py
+++ b/rosidl_generator_type_description/rosidl_generator_type_description/__init__.py
@@ -15,6 +15,7 @@
 from copy import deepcopy
 import hashlib
 import json
+import os
 from pathlib import Path
 import re
 import sys
@@ -100,6 +101,8 @@ def generate_type_hash(generator_arguments_file: str) -> List[str]:
     include_map = {
         package_name: output_dir
     }
+    print(f"include_map {include_map}")
+    print(f"include_paths {include_paths}")
     for include_tuple in include_paths:
         include_parts = include_tuple.split(':', 1)
         assert len(include_parts) == 2
@@ -157,6 +160,7 @@ def generate_type_hash(generator_arguments_file: str) -> List[str]:
         process_include = pending_includes.pop()
         p_path = process_include.with_suffix('.json')
         pkg = p_path.parts[0]
+        print(f"pkg: {pkg}\np_path.relative_to(pkg) {p_path.relative_to(pkg)}\ninclude_map: {include_map}\ncwd: {os.getcwd()}")
         pkg_dir = include_map[pkg]
         include_path = pkg_dir / p_path.relative_to(pkg)
         with include_path.open('r') as include_file:
diff --git a/rosidl_pycommon/rosidl_pycommon/__init__.py b/rosidl_pycommon/rosidl_pycommon/__init__.py
index 36d8871..dc3c899 100644
--- a/rosidl_pycommon/rosidl_pycommon/__init__.py
+++ b/rosidl_pycommon/rosidl_pycommon/__init__.py
@@ -62,6 +62,7 @@ def generate_files(
     args = read_generator_arguments(generator_arguments_file)
 
     template_basepath = pathlib.Path(args['template_dir'])
+    print(f"template_basepath: {template_basepath}")
     for template_filename in mapping.keys():
         assert (template_basepath / template_filename).exists(), \
             'Could not find template: ' + template_filename
@@ -71,10 +72,13 @@ def generate_files(
 
     type_description_files = {}
     for description_tuple in args.get('type_description_tuples', []):
+        print(f"tuple: {description_tuple}")
         tuple_parts = description_tuple.split(':', 1)
         assert len(tuple_parts) == 2
         type_description_files[tuple_parts[0]] = tuple_parts[1]
     ros_interface_files = {}
+    print(f"type_description_files: {type_description_files}")
+    print(f"ros_interface_files: {args.get('ros_interface_files',  [])}")
     for ros_interface_file in args.get('ros_interface_files',  []):
         p = pathlib.Path(ros_interface_file)
         # e.g. ('msg', 'Empty')
@@ -222,6 +226,7 @@ def expand_template(
         except FileExistsError:
             pass
 
+    print(f"writing to {output_file}")
     with open(output_file, 'w', encoding='utf-8') as h:
         h.write(content)
 
