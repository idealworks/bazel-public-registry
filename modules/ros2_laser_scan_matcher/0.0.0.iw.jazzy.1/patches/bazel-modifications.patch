diff --git a/include/ros2_laser_scan_matcher/laser_scan_matcher.h b/include/ros2_laser_scan_matcher/laser_scan_matcher.h
index c507bd9..aeb8ee9 100644
--- a/include/ros2_laser_scan_matcher/laser_scan_matcher.h
+++ b/include/ros2_laser_scan_matcher/laser_scan_matcher.h
@@ -44,7 +44,7 @@
 #include <tf2_ros/transform_broadcaster.h>
 #include <tf2_ros/transform_listener.h>
 #include <tf2_ros/message_filter.h>
-#include <tf2_geometry_msgs/tf2_geometry_msgs.h>
+#include <tf2_geometry_msgs/tf2_geometry_msgs.hpp>
 #include <tf2/utils.h>
 
 #include "rclcpp/rclcpp.hpp"
diff --git a/src/laser_scan_matcher.cpp b/src/laser_scan_matcher.cpp
index 2f4b8ac..0524c26 100644
--- a/src/laser_scan_matcher.cpp
+++ b/src/laser_scan_matcher.cpp
@@ -224,8 +224,8 @@ LaserScanMatcher::LaserScanMatcher() : Node("laser_scan_matcher"), initialized_(
   input_.use_sigma_weights = this->get_parameter("use_sigma_weights").as_int();
 
 
-  double transform_publish_period;
-  double tmp;
+  // double transform_publish_period;
+  // double tmp;
   
   // State variables
 
@@ -320,7 +320,7 @@ bool LaserScanMatcher::getBaseToLaserTf (const std::string& frame_id)
       base_to_laser_tf.setRotation(q);
  
   }
-  catch (tf2::TransformException ex)
+  catch (tf2::TransformException& ex)
   {
     RCLCPP_INFO(get_logger(),"Could not get initial transform from base to laser frame, %s", ex.what());
     return false;
@@ -365,7 +365,7 @@ bool LaserScanMatcher::processScan(LDP& curr_ldp_scan, const rclcpp::Time& time)
   tf2::Transform pr_ch_l;
 
   double dt = (now() - last_icp_time_).nanoseconds()/1e+9;
-  double pr_ch_x, pr_ch_y, pr_ch_a;
+  // double pr_ch_x, pr_ch_y, pr_ch_a;
   
 
   // the predicted change of the laser's position, in the fixed frame
